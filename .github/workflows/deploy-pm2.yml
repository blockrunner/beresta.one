name: Deploy to Production (PM2)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci
        cd app/api && npm ci
        
    - name: Build application
      run: |
        npm run build:site
        npm run install:prod
        
    - name: Create deployment package
      run: |
        mkdir -p deploy-package
        cp -r dist deploy-package/
        cp -r app deploy-package/
        cp -r img deploy-package/
        cp -r css deploy-package/
        cp -r js deploy-package/
        cp -r shared deploy-package/
        cp -r components deploy-package/
        cp -r locales deploy-package/
        cp -r pages deploy-package/
        cp package.json deploy-package/
        cp package-lock.json deploy-package/
        cp server.js deploy-package/
        cp ecosystem.config.js deploy-package/
        cp .env.example deploy-package/.env
        
        # Create logs directory
        mkdir -p deploy-package/logs
        
        # Create .htaccess for Apache
        cat > deploy-package/.htaccess << 'EOF'
        RewriteEngine On
        
        # Proxy to Node.js server if available
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteCond %{REQUEST_FILENAME} !-d
        RewriteRule ^(.*)$ http://localhost:3000/$1 [P,L]
        
        # Fallback to static files
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteCond %{REQUEST_FILENAME} !-d
        RewriteRule ^([^/]+)/?$ pages/$1/index.html [L]
        
        # Cache static files
        <IfModule mod_expires.c>
            ExpiresActive On
            ExpiresByType text/css "access plus 1 year"
            ExpiresByType application/javascript "access plus 1 year"
            ExpiresByType image/png "access plus 1 year"
            ExpiresByType image/jpg "access plus 1 year"
            ExpiresByType image/jpeg "access plus 1 year"
            ExpiresByType image/gif "access plus 1 year"
            ExpiresByType image/svg+xml "access plus 1 year"
        </IfModule>
        EOF
        
        # Create PM2 startup script
        cat > deploy-package/start.sh << 'EOF'
        #!/bin/bash
        cd "$(dirname "$0")"
        
        # Install PM2 globally if not installed
        if ! command -v pm2 &> /dev/null; then
            npm install -g pm2
        fi
        
        # Stop existing application
        pm2 stop beresta-website 2>/dev/null || true
        pm2 delete beresta-website 2>/dev/null || true
        
        # Start application with PM2
        pm2 start ecosystem.config.js --env production
        
        # Save PM2 configuration
        pm2 save
        
        # Setup PM2 startup (if not already done)
        pm2 startup 2>/dev/null || true
        
        echo "Application started with PM2"
        EOF
        
        chmod +x deploy-package/start.sh
        
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
        
    - name: Deploy to server
      run: |
        # Create backup
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cp -r ${{ secrets.REMOTE_PATH }} ${{ secrets.REMOTE_PATH }}.backup.$(date +%Y%m%d_%H%M%S) 2>/dev/null || true"
        
        # Upload files
        rsync -avz --delete deploy-package/ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.REMOTE_PATH }}/
        
        # Install dependencies on server
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.REMOTE_PATH }} && npm install --production"
        
        # Set up environment
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.REMOTE_PATH }} && cp .env.example .env"
        
    - name: Restart application with PM2
      run: |
        # Run the startup script
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.REMOTE_PATH }} && ./start.sh"
        
        # Wait for application to start
        sleep 10
        
        # Check if application is running
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "pm2 status beresta-website"
        
    - name: Health check
      run: |
        # Wait for application to be ready
        sleep 15
        
        # Check main page
        curl -f "http://${{ secrets.SSH_HOST }}/" || exit 1
        
        # Check applications page
        curl -f "http://${{ secrets.SSH_HOST }}/applications/" || exit 1
        
        echo "âœ… Health check passed - application is running"
        
    - name: Show PM2 status
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "pm2 status"
        
    - name: Cleanup
      if: always()
      run: |
        rm -rf deploy-package
