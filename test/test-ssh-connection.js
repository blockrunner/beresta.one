#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —á—Ç–æ –∏ –≤ GitHub Actions
 */

const { exec } = require('child_process');
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
function loadEnvFile() {
  const envPath = path.join(__dirname, '..', '..', 'env.example');
  
  if (!fs.existsSync(envPath)) {
    console.error('‚ùå –§–∞–π–ª env.example –Ω–µ –Ω–∞–π–¥–µ–Ω');
    process.exit(1);
  }
  
  const envContent = fs.readFileSync(envPath, 'utf8');
  const envVars = {};
  
  envContent.split('\n').forEach(line => {
    const [key, value] = line.split('=');
    if (key && value) {
      envVars[key.trim()] = value.trim();
    }
  });
  
  return envVars;
}

async function testSSHConnection() {
  console.log('üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...\n');
  
  const env = loadEnvFile();
  
  const host = env.SSH_HOST;
  const username = env.SSH_USER;
  const password = env.SSH_PASS;
  
  if (!host || !username || !password) {
    console.error('‚ùå –ù–µ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã:');
    console.error(`SSH_HOST: ${host ? '‚úÖ' : '‚ùå'}`);
    console.error(`SSH_USER: ${username ? '‚úÖ' : '‚ùå'}`);
    console.error(`SSH_PASS: ${password ? '‚úÖ' : '‚ùå'}`);
    process.exit(1);
  }
  
  console.log(`üì° –•–æ—Å—Ç: ${host}`);
  console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}`);
  console.log(`üîë –ü–∞—Ä–æ–ª—å: ${password ? '***' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
  console.log('');
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  const sshCommand = `sshpass -p "${password}" ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${username}@${host} "echo 'SSH connection successful!'"`;
  
  console.log('üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
  
  return new Promise((resolve, reject) => {
    exec(sshCommand, (error, stdout, stderr) => {
      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:');
        console.error(error.message);
        if (stderr) {
          console.error('Stderr:', stderr);
        }
        reject(error);
      } else {
        console.log('‚úÖ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');
        console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', stdout.trim());
        resolve();
      }
    });
  });
}

async function testDockerCommands() {
  console.log('\nüê≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Docker –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...\n');
  
  const env = loadEnvFile();
  const host = env.SSH_HOST;
  const username = env.SSH_USER;
  const password = env.SSH_PASS;
  
  const commands = [
    'docker --version',
    'docker-compose --version',
    'pwd',
    'ls -la'
  ];
  
  for (const command of commands) {
    console.log(`üîß –í—ã–ø–æ–ª–Ω—è–µ–º: ${command}`);
    
    const sshCommand = `sshpass -p "${password}" ssh -o StrictHostKeyChecking=no ${username}@${host} "${command}"`;
    
    try {
      await new Promise((resolve, reject) => {
        exec(sshCommand, (error, stdout, stderr) => {
          if (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã "${command}":`);
            console.error(error.message);
            reject(error);
          } else {
            console.log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${stdout.trim()}`);
            resolve();
          }
        });
      });
    } catch (error) {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É: ${command}`);
    }
    console.log('');
  }
}

async function main() {
  try {
    await testSSHConnection();
    await testDockerCommands();
    console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    console.error('üí• –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { testSSHConnection, testDockerCommands };
